buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}
plugins {

    id 'com.github.johnrengelman.shadow' version '[2.0.4,9.0.0]'
    id 'eclipse'
    id 'idea'
    id 'java'
    id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
}

apply plugin: 'org.spongepowered.mixin'

group = mod_group_id
version = mod_version

base {
    archivesName = mod_id
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    // The mappings can be changed at any time and must be in the following format.
    // Channel:   Version:
    // official   MCVersion             Official field/method names from Mojang mapping files
    // parchment  YYYY.MM.DD-MCVersion  Open community-sourced parameter names and javadocs layered on top of official
    //
    // You must be aware of the Mojang license when using the 'official' or 'parchment' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Parchment is an unofficial project maintained by ParchmentMC, separate from MinecraftForge
    // Additional setup is needed to use their mappings: https://parchmentmc.org/docs/getting-started
    //
    // Use non-default mappings at your own risk. They may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: mapping_channel, version: mapping_version

    // When true, this property will have all Eclipse/IntelliJ IDEA run configurations run the "prepareX" task for the given run configuration before launching the game.
    // In most cases, it is not necessary to enable.
    // enableEclipsePrepareRuns = true
    // enableIdeaPrepareRuns = true

    // This property allows configuring Gradle's ProcessResources task(s) to run on IDE output locations before launching the game.
    // It is REQUIRED to be set to true for this template to function.
    // See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
    copyIdeResources = true

    // When true, this property will add the folder name of all declared run configurations to generated IDE run configurations.
    // The folder name can be set on a run configuration using the "folderName" property.
    // By default, the folder name of a run configuration is the name of the Gradle project containing it.
    // generateRunFolders = true

    // This property enables access transformers for use in development.
    // They will be applied to the Minecraft artifact.
    // The access transformer file can be anywhere in the project.
    // However, it must be at "META-INF/accesstransformer.cfg" in the final mod jar to be loaded by Forge.
    // This default location is a best practice to automatically put the file in the right place in the final jar.
    // See https://docs.minecraftforge.net/en/latest/advanced/accesstransformers/ for more information.
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        // applies to all the run configs below
        configureEach {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'


            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            // example of overriding the workingDirectory set in configureEach above
            workingDirectory project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

mixin {
    add sourceSets.main, "excareerwar.refmap.json"

    config "excareerwar.mixins.json"
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { // CurseForge
        url "https://www.cursemaven.com"
    }
    flatDir {
        dir 'G:\\MC\\ExModifier1.20.1\\build\\libs'
    }
    flatDir {
        dirs 'libs'
    }
    maven {
        // Location of the maven for mixed mappings, Registrate, and Flywheel
        name 'tterrag maven'
        url 'https://maven.tterrag.com/'
    }
    maven {
        // Location of the maven for vazkii's mods
        name 'blamejared'
        url 'https://maven.blamejared.com'
    }
    maven {
        // Location of the maven that hosts JEI files (and TiC)
        name 'Progwml6 maven'
        url 'https://dvs1.progwml6.com/files/maven'
    }
}

dependencies {
    implementation fg.deobf(jarJar("mod.arcomit:emberthral:1.0.1")){
        jarJar.ranged(it, "[1.0.0,)")
    }
    implementation fg.deobf("curse.maven:caelus-308989:5281700")
    implementation fg.deobf("curse.maven:selene-499980:6009554")
    implementation fg.deobf("curse.maven:mmmmmmmmmmmm-225738:5737040")
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    implementation fg.deobf("curse.maven:damage-number-998849:5538112")
    implementation fg.deobf(jarJar("net.exmo.exmodifier:exmodifier:[0.00001,1)"))
    runtimeOnly fg.deobf(jarJar("dev.architectury:architectury:[9.2.0,9.2.18)"))
    runtimeOnly fg.deobf(jarJar("com.kirdow.itemlocks:itemlocks:[1.3.7,1.3.9)"))
    runtimeOnly fg.deobf(jarJar("net.darkhax.attributefix:attributefix:[0,40.0.0)"))
    runtimeOnly fg.deobf(jarJar("top.theillusivec4.caelus:caelus:[0,40.0.0)"))
    implementation fg.deobf(jarJar("top.theillusivec4.curios:curios:[0,40.0.0)"))
    runtimeOnly fg.deobf(jarJar("customskinloader:customskinloader:[0,40.0.0)"))
    implementation fg.deobf(jarJar("geckolib:geckolib:[0,40.0.0)"))
    runtimeOnly fg.deobf(jarJar("Jade:Jade:[0,40.0.0)"))
    implementation fg.deobf("curse.maven:modernfix-790626:6766127")
    implementation fg.deobf("curse.maven:rpg-hud-235670:6714295")
    runtimeOnly fg.deobf(jarJar("jei:jei:[0,40.0.0)"))
    runtimeOnly fg.deobf((jarJar("l2library:l2library:[0,40.0.0)")))
    runtimeOnly fg.deobf((jarJar("l2serial:l2serial:[0,40.0.0)")))
    implementation fg.deobf(jarJar("Placebo-1.20.1:Placebo-1.20.1:[0,40.0.0)"))
    runtimeOnly fg.deobf(jarJar("mcwifipnp:mcwifipnp:[0,40.0.0)"))
 //   runtimeOnly jarJar("oculus:oculus:[0,40.0.0)")
    runtimeOnly fg.deobf(jarJar("packetfixer:packetfixer:[0,40.0.0)"))
    implementation fg.deobf(jarJar("player-animation-lib:player-animation-lib:[0,40.0.0)"))
    runtimeOnly fg.deobf(jarJar("TES-forge-1.20.1:TES-forge-1.20.1:[0,40.0.0)"))
    runtimeOnly fg.deobf(jarJar("xlpackets-1.18.2:xlpackets-1.18.2:[0,40.0.0)"))
    implementation fg.deobf("curse.maven:irons-spells-n-spellbooks-855414:6488484")
    implementation fg.deobf(jarJar("ApothicAttributes-1.20.1:ApothicAttributes-1.20.1:[0,40.0.0)"))
    implementation fg.deobf(jarJar("me.shedaniel.clothconfig:clothconfig:[0,40.0.0)"))
    implementation fg.deobf(jarJar("net.exmo:exmodifier_compat:0.04")){
        jarJar.ranged(it, "[0.04,)")
    }

    compileOnly(annotationProcessor("com.github.llamalad7.mixinextras:mixinextras-common:${mixin_extras_version}"))
    if (rootMod.toBoolean()) {
        implementation(jarJar("com.github.llamalad7.mixinextras:mixinextras-forge:${mixin_extras_version}")) {
            transitive = false
            jarJar.ranged(it, "[${mixin_extras_version},)")
        }
    } else {
        implementation("com.github.llamalad7.mixinextras:mixinextras-forge:${mixin_extras_version}")
    }
    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"
    implementation fg.deobf('org.reflections:reflections-mod:0.10.2')
   jarJar(group: 'org.reflections', name: 'reflections-mod', version: "[0.9,0.10.3)")
    implementation fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")
    jarJar(group: 'com.tterrag.registrate', name: 'Registrate', version: "[MC1.20,MC1.21)")

}
minecraft {
    runs {
        client {
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
        }

        server {
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
        }
        data {
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
        }
    }
}


// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
                             forge_version       : forge_version, forge_version_range: forge_version_range,
                             loader_version_range: loader_version_range,
                             mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
                             mod_authors         : mod_authors, mod_description: mod_description,]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

// Example for how to get properties into the manifest for reading at runtime.
tasks.named('jar', Jar).configure {
    manifest {
        attributes(["Specification-Title"     : mod_id,
                    "Specification-Vendor"    : mod_authors,
                    "Specification-Version"   : "1", // We are version 1 of ourselves
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : project.jar.archiveVersion,
                    "Implementation-Vendor"   : mod_authors,
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")])
    }

    // This is the preferred method to reobfuscate your jar file
    finalizedBy 'reobfJar'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
